m4_init()
m4_define([b4_mergers], 
[[]])

m4_define([b4_symbol_numbers],
[[0], [1], [2], [3], [4], [5], [6], [7], [8], [9], [10], [11], [12], [13], [14], [15], [16], [17], [18], [19], [20], [21], [22], [23], [24], [25], [26], [27], [28], [29], [30], [31], [32], [33], [34], [35], [36], [37], [38], [39], [40], [41], [42], [43], [44], [45], [46], [47], [48], [49], [50], [51], [52], [53], [54], [55], [56], [57], [58], [59]])

m4_define([b4_type_names],
[[0, 1, 2, 5, 6, 7, 8, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 40, 41, 42, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59],
[35, 36, 37, 38, 39, 43, 44, 45],
[3],
[9],
[4, 11]])

m4_define([b4_actions], 
[b4_case(2, [b4_syncline(198, [["090111575.y"]])
[    {
					// strcpy(pair->description, "Begin");
					// strcpy(pair->value, "");
					// $][$][ = createNode(pair);
					// newChild($][$][, $][1);
					showTree(]b4_lhs_value([[NODE]])[, 0);
				    printSymbolTable();
				}]])

b4_case(3, [b4_syncline(208, [["090111575.y"]])
[    {
					strcpy(pair->description, "FunctionSet");
			        strcpy(pair->value, "");
			        ]b4_lhs_value([[NODE]])[ = createNode(pair);

			        newChild(]b4_lhs_value([[NODE]])[,]b4_rhs_value(2, 1, [[NODE]])[);
			        newChild(]b4_lhs_value([[NODE]])[,]b4_rhs_value(2, 2, [[NODE]])[);
				}]])

b4_case(4, [b4_syncline(217, [["090111575.y"]])
[    {
		   			strcpy(pair->description, "FunctionSet");
			        strcpy(pair->value, "");
			        ]b4_lhs_value([[NODE]])[ = createNode(pair);

			        newChild(]b4_lhs_value([[NODE]])[,]b4_rhs_value(1, 1, [[NODE]])[);
				}]])

b4_case(5, [b4_syncline(226, [["090111575.y"]])
[    {
					strcpy(pair->description, "Function");
			        strcpy(pair->value, "");
			        ]b4_lhs_value([[NODE]])[ = createNode(pair);

			        newChild(]b4_lhs_value([[NODE]])[,]b4_rhs_value(6, 1, [[NODE]])[);

			        strcpy(pair->description, "Identifier");
			        strcpy(pair->value, ]b4_rhs_value(6, 2, [[str_value]])[);
			        newChild(]b4_lhs_value([[NODE]])[,createNode(pair));

			        strcpy(pair->description, "(");
			        strcpy(pair->value, "");
			        newChild(]b4_lhs_value([[NODE]])[,createNode(pair));

			        newChild(]b4_lhs_value([[NODE]])[,]b4_rhs_value(6, 4, [[NODE]])[);

			        strcpy(pair->description, ")");
			        strcpy(pair->value, "");
			        newChild(]b4_lhs_value([[NODE]])[,createNode(pair));

			        newChild(]b4_lhs_value([[NODE]])[,]b4_rhs_value(6, 6, [[NODE]])[);
			    }]])

b4_case(6, [b4_syncline(249, [["090111575.y"]])
[    {
					strcpy(pair->description, "FormalArgList");
					strcpy(pair->value, "");
					]b4_lhs_value([[NODE]])[ = createNode(pair);

					newChild(]b4_lhs_value([[NODE]])[,NULL);
			    }]])

b4_case(7, [b4_syncline(256, [["090111575.y"]])
[    {
					strcpy(pair->description, "FormalArgList");
			        strcpy(pair->value, "");
			        ]b4_lhs_value([[NODE]])[ = createNode(pair);

			        newChild(]b4_lhs_value([[NODE]])[,]b4_rhs_value(1, 1, [[NODE]])[);
			    }]])

b4_case(8, [b4_syncline(263, [["090111575.y"]])
[    {
					strcpy(pair->description, "FormalArgList");
			        strcpy(pair->value, "");
			        ]b4_lhs_value([[NODE]])[ = createNode(pair);

			        newChild(]b4_lhs_value([[NODE]])[,]b4_rhs_value(3, 1, [[NODE]])[);

			        strcpy(pair->description, ",");
			        strcpy(pair->value, "");
			        newChild(]b4_lhs_value([[NODE]])[,createNode(pair));

			        newChild(]b4_lhs_value([[NODE]])[,]b4_rhs_value(3, 3, [[NODE]])[);
			    }]])

b4_case(9, [b4_syncline(276, [["090111575.y"]])
[    {
		   			strcpy(pair->description, "FormalArg");
			        strcpy(pair->value, "");
			        ]b4_lhs_value([[NODE]])[ = createNode(pair);
			        newChild(]b4_lhs_value([[NODE]])[,]b4_rhs_value(2, 1, [[NODE]])[);

			        strcpy(pair->description, "Identifier");
			        strcpy(pair->value, ]b4_rhs_value(2, 2, [[str_value]])[);
			        newChild(]b4_lhs_value([[NODE]])[,createNode(pair));
				}]])

b4_case(10, [b4_syncline(286, [["090111575.y"]])
[    { printf("bison: ArgList 0\n"); }]])

b4_case(11, [b4_syncline(287, [["090111575.y"]])
[    { printf("bison: ArgList 1\n"); }]])

b4_case(12, [b4_syncline(288, [["090111575.y"]])
[    { printf("bison: ArgList 2\n"); }]])

b4_case(13, [b4_syncline(290, [["090111575.y"]])
[    { printf("bison: Arg 1\n"); }]])

b4_case(14, [b4_syncline(291, [["090111575.y"]])
[    { printf("bison: Arg 2\n"); }]])

b4_case(15, [b4_syncline(292, [["090111575.y"]])
[    { printf("bison: Arg 3\n"); }]])

b4_case(16, [b4_syncline(294, [["090111575.y"]])
[    { printf("bison: Declaration 1\n"); }]])

b4_case(17, [b4_syncline(295, [["090111575.y"]])
[    { printf("bison: Declaration 1\n"); }]])

b4_case(18, [b4_syncline(297, [["090111575.y"]])
[    {
					strcpy(pair->description, "Type");
			        strcpy(pair->value, "");
			        ]b4_lhs_value([[NODE]])[ = createNode(pair);

			        strcpy(pair->description, "int");
			        strcpy(pair->value, "");

			        newChild(]b4_lhs_value([[NODE]])[,createNode(pair));
			    }]])

b4_case(19, [b4_syncline(307, [["090111575.y"]])
[    {
					strcpy(pair->description, "string");
			        strcpy(pair->value, "");
			        ]b4_lhs_value([[NODE]])[ = createNode(pair);

			        newChild(]b4_lhs_value([[NODE]])[,NULL);
			    }]])

b4_case(20, [b4_syncline(314, [["090111575.y"]])
[    {
					strcpy(pair->description, "FormalArgList");
			        strcpy(pair->value, "");
			        ]b4_lhs_value([[NODE]])[ = createNode(pair);

			        strcpy(pair->description, "{");
			        strcpy(pair->value, "");
			        newChild(]b4_lhs_value([[NODE]])[,createNode(pair));

			        newChild(]b4_lhs_value([[NODE]])[,NULL);

			        strcpy(pair->description, "}");
			        strcpy(pair->value, "");
			        newChild(]b4_lhs_value([[NODE]])[,createNode(pair));
			    }]])

b4_case(21, [b4_syncline(329, [["090111575.y"]])
[    { printf("bison: StmtList 1\n"); }]])

b4_case(22, [b4_syncline(330, [["090111575.y"]])
[    { printf("bison: StmtList 2\n"); }]])

b4_case(23, [b4_syncline(332, [["090111575.y"]])
[    { printf("bison: Stmt 1\n"); }]])

b4_case(24, [b4_syncline(333, [["090111575.y"]])
[    { printf("bison: Stmt 5\n"); }]])

b4_case(25, [b4_syncline(334, [["090111575.y"]])
[    { printf("bison: Stmt 2\n"); }]])

b4_case(26, [b4_syncline(335, [["090111575.y"]])
[    { printf("bison: Stmt 3\n"); }]])

b4_case(27, [b4_syncline(336, [["090111575.y"]])
[    { printf("bison: Stmt 4\n"); }]])

b4_case(28, [b4_syncline(337, [["090111575.y"]])
[    { printf("bison: Stmt 8\n"); }]])

b4_case(29, [b4_syncline(339, [["090111575.y"]])
[    { printf("bison: WhileStmt 1\n"); }]])

b4_case(30, [b4_syncline(341, [["090111575.y"]])
[    { printf("bison: IfStmt 1\n"); }]])

b4_case(31, [b4_syncline(342, [["090111575.y"]])
[    { printf("bison: IfStmt 1\n"); }]])

b4_case(32, [b4_syncline(344, [["090111575.y"]])
[    { printf("bison: ReturnStmt 1\n"); }]])

b4_case(33, [b4_syncline(345, [["090111575.y"]])
[    { printf("bison: ReturnStmt 2\n"); }]])

b4_case(34, [b4_syncline(347, [["090111575.y"]])
[    { printf("bison: Expr 1\n"); }]])

b4_case(35, [b4_syncline(348, [["090111575.y"]])
[    { printf("bison: Expr 2\n"); }]])

b4_case(36, [b4_syncline(349, [["090111575.y"]])
[    { printf("bison: Expr 3\n"); }]])

b4_case(37, [b4_syncline(350, [["090111575.y"]])
[    { printf("bison: Expr 4\n"); }]])

b4_case(38, [b4_syncline(352, [["090111575.y"]])
[    { printf("bison: Attribution 1\n"); }]])

b4_case(39, [b4_syncline(354, [["090111575.y"]])
[    { printf("bison: Rvalue 1\n"); }]])

b4_case(40, [b4_syncline(355, [["090111575.y"]])
[    { printf("bison: Rvalue 2\n"); }]])

b4_case(41, [b4_syncline(357, [["090111575.y"]])
[    { printf("bison: Compare 1\n"); }]])

b4_case(42, [b4_syncline(358, [["090111575.y"]])
[    { printf("bison: Compare 2\n"); }]])

b4_case(43, [b4_syncline(359, [["090111575.y"]])
[    { printf("bison: Compare 3\n"); }]])

b4_case(44, [b4_syncline(360, [["090111575.y"]])
[    { printf("bison: Compare 4\n"); }]])

b4_case(45, [b4_syncline(361, [["090111575.y"]])
[    { printf("bison: Compare 5\n"); }]])

b4_case(46, [b4_syncline(362, [["090111575.y"]])
[    { printf("bison: Compare 6\n"); }]])

b4_case(47, [b4_syncline(364, [["090111575.y"]])
[    { printf("bison: Addition 1\n"); }]])

b4_case(48, [b4_syncline(365, [["090111575.y"]])
[    { printf("bison: Addition 2\n"); }]])

b4_case(49, [b4_syncline(366, [["090111575.y"]])
[    { printf("bison: Addition 3\n"); }]])

b4_case(50, [b4_syncline(368, [["090111575.y"]])
[    { printf("bison: Multiplication 1\n"); }]])

b4_case(51, [b4_syncline(369, [["090111575.y"]])
[    { printf("bison: Multiplication 2\n"); }]])

b4_case(52, [b4_syncline(370, [["090111575.y"]])
[    { printf("bison: Multiplication 3\n"); }]])

b4_case(53, [b4_syncline(372, [["090111575.y"]])
[    { printf("bison: Term 1\n"); }]])

b4_case(54, [b4_syncline(373, [["090111575.y"]])
[    { printf("bison: Term 2\n"); }]])

b4_case(55, [b4_syncline(374, [["090111575.y"]])
[    { printf("bison: Term 3\n"); }]])

b4_case(56, [b4_syncline(375, [["090111575.y"]])
[    { printf("bison: Term 4\n"); }]])

b4_case(57, [b4_syncline(377, [["090111575.y"]])
[    { printf("bison: Factor 1\n"); }]])

b4_case(58, [b4_syncline(378, [["090111575.y"]])
[    { printf("bison: Factor 2\n"); }]])

b4_case(59, [b4_syncline(379, [["090111575.y"]])
[    { printf("bison: Factor 3\n"); }]])

b4_case(60, [b4_syncline(381, [["090111575.y"]])
[    { printf("bison: FunctionCall 1\n"); }]])

b4_case(61, [b4_syncline(382, [["090111575.y"]])
[    { printf("bison: FunctionCall 1\n"); }]])

b4_case(62, [b4_syncline(384, [["090111575.y"]])
[    { printf("bison: StringConcat 0\n"); }]])

b4_case(63, [b4_syncline(385, [["090111575.y"]])
[    { printf("bison: StringConcat 0.5\n"); }]])

b4_case(64, [b4_syncline(386, [["090111575.y"]])
[    { printf("bison: StringConcat 1\n"); }]])

b4_case(65, [b4_syncline(387, [["090111575.y"]])
[    { printf("bison: StringConcat 2\n"); }]])

b4_case(66, [b4_syncline(388, [["090111575.y"]])
[    { printf("bison: StringConcat 3\n"); }]])

b4_case(67, [b4_syncline(389, [["090111575.y"]])
[    { printf("bison: StringConcat 4\n"); }]])

])

m4_define([b4_rline_max],
[[389]])


m4_define([b4_symbol(50, has_destructor)],
[[0]])


m4_define([b4_symbol(7, has_destructor)],
[[0]])


m4_define([b4_symbol(7, number)],
[[7]])


m4_define([b4_symbol(50, number)],
[[50]])


m4_define([b4_symbol(38, has_type)],
[[1]])


m4_define([b4_symbol(43, has_type)],
[[1]])


m4_define([b4_symbol(53, number)],
[[53]])


m4_define([b4_symbol(5, has_type)],
[[0]])


m4_define([b4_symbol(12, id)],
[[VOID]])


m4_define([b4_symbol(56, number)],
[[56]])


m4_define([b4_symbol(49, is_token)],
[[0]])


m4_define([b4_symbol(54, is_token)],
[[0]])


m4_define([b4_conflict_list_heads],
[[     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0]])


m4_define([b4_symbol(59, type)],
[[]])


m4_define([b4_symbol(59, number)],
[[59]])


m4_define([b4_symbol(4, has_destructor)],
[[0]])


m4_define([b4_symbol(46, id)],
[[Stmt]])


m4_define([b4_conflicting_rules_min],
[[0]])


m4_define([b4_symbol(49, type)],
[[]])


m4_define([b4_symbol(46, has_printer)],
[[0]])


m4_define([b4_symbol(55, user_number)],
[[-1]])


m4_define([b4_symbol(5, id)],
[[IF]])


m4_define([b4_symbol(39, type)],
[[NODE]])


m4_define([b4_symbol(5, has_printer)],
[[0]])


m4_define([b4_symbol(39, has_type)],
[[1]])


m4_define([b4_symbol(1, has_destructor)],
[[0]])


m4_define([b4_symbol(39, has_destructor)],
[[0]])


m4_define([b4_symbol(44, has_type)],
[[1]])


m4_define([b4_symbol(29, type)],
[[]])


m4_define([b4_symbol(6, has_type)],
[[0]])


m4_define([b4_symbol(23, has_printer)],
[[0]])


m4_define([b4_symbol(32, user_number)],
[[274]])


m4_define([b4_symbol(39, id)],
[[FormalArg]])


m4_define([b4_symbol(4, type)],
[[str_value]])


m4_define([b4_symbol(55, is_token)],
[[0]])


m4_define([b4_last],
[[127]])


m4_define([b4_symbol(19, type)],
[[]])


m4_define([b4_symbol(41, id)],
[[Arg]])


m4_define([b4_symbol(12, has_id)],
[[1]])


m4_define([b4_symbol(15, has_id)],
[[0]])


m4_define([b4_symbol(36, has_destructor)],
[[0]])


m4_define([b4_symbol(0, tag)],
[[$][end]])


m4_define([b4_symbol(18, has_id)],
[[0]])


m4_define([b4_symbol(0, id)],
[[]])


m4_define([b4_symbol(59, user_number)],
[[-1]])


m4_define([b4_symbol(12, tag)],
[[VOID]])


m4_define([b4_symbol(10, is_token)],
[[1]])


m4_define([b4_symbol(9, has_printer)],
[[0]])


m4_define([b4_symbol(52, has_printer)],
[[0]])


m4_define([b4_max_left_semantic_context],
[[0]])


m4_define([b4_symbol(45, has_type)],
[[1]])


m4_define([b4_symbol(7, has_type)],
[[0]])


m4_define([b4_symbol(50, has_type)],
[[0]])


m4_define([b4_symbol(33, has_destructor)],
[[0]])


m4_define([b4_symbol(34, id)],
[[]])


m4_define([b4_symbol(56, is_token)],
[[0]])


m4_define([b4_symbol(31, tag)],
[[GreaterThanOrEqualTo]])


m4_define([b4_symbol(27, has_printer)],
[[0]])


m4_define([b4_defact],
[[     0,    18,    19,     0,     2,     4,     0,     1,     3,     0,
       6,     0,     7,     0,     0,     0,     9,    22,     5,     8,
       0,    57,     0,     0,    58,    59,    32,     0,    20,     0,
       0,     0,     0,    27,    21,    23,    26,     0,     0,    35,
      34,    40,    49,    52,    56,    36,    37,    10,     0,     0,
       0,     0,     0,     0,    33,     0,    57,    59,    55,    54,
      24,    16,    17,    28,    25,    41,    42,    43,    44,    45,
      46,     0,     0,     0,     0,     0,     0,    57,     0,    11,
      13,    14,    15,    38,     0,    67,    65,     0,     0,    66,
      64,    53,    39,    47,    48,    50,    51,    63,    62,    60,
       0,    10,     0,     0,    12,     0,    30,    29,    61,     0,
      31]])


m4_define([b4_symbol(36, user_number)],
[[-1]])


m4_define([b4_conflicting_rules],
[[     0]])


m4_define([b4_symbol(25, tag)],
[['.']])


m4_define([b4_symbol(7, tag)],
[[WHILE]])


m4_define([b4_symbol(50, tag)],
[[Expr]])


m4_define([b4_symbol(21, has_id)],
[[0]])


m4_define([b4_user_token_number_max],
[[275]])


m4_define([b4_symbol(30, has_destructor)],
[[0]])


m4_define([b4_symbol(24, has_id)],
[[0]])


m4_define([b4_symbol(19, tag)],
[[';']])


m4_define([b4_symbol(13, user_number)],
[[268]])


m4_define([b4_symbol(54, type)],
[[]])


m4_define([b4_symbol(44, tag)],
[[CompoundStmt]])


m4_define([b4_symbol(27, has_id)],
[[1]])


m4_define([b4_rline],
[[     0,   198,   198,   207,   216,   225,   249,   256,   263,   276,
     286,   287,   288,   290,   291,   292,   294,   295,   297,   307,
     314,   329,   330,   332,   333,   334,   335,   336,   337,   339,
     341,   342,   344,   345,   347,   348,   349,   350,   352,   354,
     355,   357,   358,   359,   360,   361,   362,   364,   365,   366,
     368,   369,   370,   372,   373,   374,   375,   377,   378,   379,
     381,   382,   384,   385,   386,   387,   388,   389]])


m4_define([b4_translate_min],
[[0]])


m4_define([b4_token_table_flag],
[[0]])


m4_define([b4_percent_define_bison_variables(lr.keep-unreachable-state)],
[[]])


m4_define([b4_symbol(11, is_token)],
[[1]])


m4_define([b4_symbol(27, id)],
[[EqualTo]])


m4_define([b4_symbol(46, has_type)],
[[0]])


m4_define([b4_symbol(38, tag)],
[[FormalArgList]])


m4_define([b4_symbol(51, has_type)],
[[0]])


m4_define([b4_symbol(44, type)],
[[NODE]])


m4_define([b4_symbol(8, has_type)],
[[0]])


m4_define([b4_percent_define_loc(lr.default-reduction)],
[[[[<default value>:-1.-1]], [[<default value>:-1.-1]]]])


m4_define([b4_spec_name_prefix],
[[]])


m4_define([b4_symbol(56, has_printer)],
[[0]])


m4_define([b4_symbol(57, is_token)],
[[0]])


m4_define([b4_spec_verbose_file],
[[090111575.output]])


m4_define([b4_rules_number],
[[67]])


m4_define([b4_symbol(34, type)],
[[]])


m4_define([b4_symbol(57, tag)],
[[Factor]])


m4_define([b4_symbol(33, has_printer)],
[[0]])


m4_define([b4_symbol(24, type)],
[[]])


m4_define([b4_symbol(30, has_id)],
[[1]])


m4_define([b4_symbol(42, user_number)],
[[-1]])


m4_define([b4_dprec_max],
[[0]])


m4_define([b4_use_push_for_pull_flag],
[[0]])


m4_define([b4_symbol(33, has_id)],
[[1]])


m4_define([b4_stos_max],
[[59]])


m4_define([b4_defgoto_min],
[[-1]])


m4_define([b4_symbol(19, has_destructor)],
[[0]])


m4_define([b4_symbol(12, is_token)],
[[1]])


m4_define([b4_symbol(36, has_id)],
[[1]])


m4_define([b4_symbol(14, type)],
[[]])


m4_define([b4_symbol(1, user_number)],
[[256]])


m4_define([b4_symbol(22, id)],
[[]])


m4_define([b4_symbol(10, number)],
[[10]])


m4_define([b4_symbol(17, user_number)],
[[125]])


m4_define([b4_symbol(39, has_id)],
[[1]])


m4_define([b4_symbol(47, has_type)],
[[0]])


m4_define([b4_symbol(9, has_type)],
[[1]])


m4_define([b4_symbol(52, has_type)],
[[0]])


m4_define([b4_symbol(13, number)],
[[13]])


m4_define([b4_pact],
[[    75,   -46,   -46,     3,    75,   -46,    20,   -46,   -46,    23,
      75,    25,   -46,    37,    43,    75,   -46,   -46,   -46,   -46,
       9,    22,    32,    50,   -46,    47,    66,    66,   -46,    82,
      82,    59,    88,   -46,   -46,   -46,   -46,    92,    93,   -46,
      70,    30,    86,   -46,   -46,   -46,    87,    40,    66,   110,
       1,    66,    66,     4,   -46,   100,   -46,   -46,   -46,   -46,
     -46,    96,   -46,   -46,   -46,   -46,   -46,   -46,   -46,   -46,
     -46,    82,    82,    82,    41,    41,    17,    13,    61,   -46,
     -46,   -46,    87,   -46,   103,   -46,   -46,   104,   105,   -46,
     -46,   -46,    30,    86,    86,   -46,   -46,   -46,   -46,   -46,
      40,    40,    43,    58,   -46,    69,   112,   -46,   -46,    43,
     -46]])


m4_define([b4_pkgdatadir],
[[C:\MinGW\msys\1.0\bin\data]])


m4_define([b4_symbol(10, has_printer)],
[[0]])


m4_define([b4_symbol(16, number)],
[[16]])


m4_define([b4_symbol(58, is_token)],
[[0]])


m4_define([b4_symbol(56, id)],
[[Term]])


m4_define([b4_symbol(19, number)],
[[19]])


m4_define([b4_symbol(47, has_destructor)],
[[0]])


m4_define([b4_symbol(16, has_destructor)],
[[0]])


m4_define([b4_percent_define_bison_variables(lr.type)],
[[]])


m4_define([b4_spec_defines_file],
[[090111575.tab.h]])


m4_define([b4_symbol(15, id)],
[[]])


m4_define([b4_symbol(37, has_printer)],
[[0]])


m4_define([b4_conflict_list_heads_max],
[[0]])


m4_define([b4_symbol(46, user_number)],
[[-1]])


m4_define([b4_symbol(44, has_destructor)],
[[0]])


m4_define([b4_nterms_number],
[[26]])


m4_define([b4_symbol(42, has_id)],
[[1]])


m4_define([b4_symbol(13, is_token)],
[[1]])


m4_define([b4_symbol(13, has_destructor)],
[[0]])


m4_define([b4_symbol(49, id)],
[[ReturnStmt]])


m4_define([b4_symbol(45, has_id)],
[[1]])


m4_define([b4_spec_outfile],
[[090111575.tab.c]])


m4_define([b4_symbol(48, has_type)],
[[0]])


m4_define([b4_symbol(5, user_number)],
[[260]])


m4_define([b4_symbol(53, has_type)],
[[0]])


m4_define([b4_symbol(48, has_id)],
[[1]])


m4_define([b4_symbol(22, number)],
[[22]])


m4_define([b4_symbol(59, is_token)],
[[0]])


m4_define([b4_immediate_max],
[[0]])


m4_define([b4_symbol(25, number)],
[[25]])


m4_define([b4_symbol(51, id)],
[[Attribution]])


m4_define([b4_symbol(8, id)],
[[INT]])


m4_define([b4_symbol(14, has_printer)],
[[0]])


m4_define([b4_symbol(6, type)],
[[]])


m4_define([b4_symbol(23, user_number)],
[[43]])


m4_define([b4_pact_ninf],
[[-46]])


m4_define([b4_symbol(41, has_destructor)],
[[0]])


m4_define([b4_symbol(28, number)],
[[28]])


m4_define([b4_symbol(1, tag)],
[[error]])


m4_define([b4_percent_define_loc(parse.trace)],
[[[[<command line>:3.-1]], [[<command line>:3.-1]]]])


m4_define([b4_symbol(10, has_destructor)],
[[0]])


m4_define([b4_percent_define_syncline(lr.type)],
[[]])


m4_define([b4_symbol(13, tag)],
[[RETURN]])


m4_define([b4_symbol(10, id)],
[[STRING]])


m4_define([b4_symbol(2, has_id)],
[[0]])


m4_define([b4_symbol(5, has_id)],
[[1]])


m4_define([b4_symbol(14, is_token)],
[[1]])


m4_define([b4_symbol(32, tag)],
[[NotEqualTo]])


m4_define([b4_symbol(51, has_id)],
[[1]])


m4_define([b4_symbol(49, has_type)],
[[0]])


m4_define([b4_symbol(44, id)],
[[CompoundStmt]])


m4_define([b4_symbol(8, has_id)],
[[1]])


m4_define([b4_symbol(54, has_type)],
[[0]])


m4_define([b4_symbol(54, has_id)],
[[1]])


m4_define([b4_symbol(43, has_printer)],
[[0]])


m4_define([b4_symbol(9, user_number)],
[[264]])


m4_define([b4_symbol(57, has_id)],
[[1]])


m4_define([b4_symbol(52, user_number)],
[[-1]])


m4_define([b4_symbol(31, number)],
[[31]])


m4_define([b4_symbol(26, tag)],
[[':']])


m4_define([b4_symbol(8, tag)],
[[INT]])


m4_define([b4_symbol(51, tag)],
[[Attribution]])


m4_define([b4_symbol(3, id)],
[[OPERATOR]])


m4_define([b4_symbol(34, number)],
[[34]])


m4_define([b4_symbol(2, has_printer)],
[[0]])


m4_define([b4_symbol(18, has_printer)],
[[0]])


m4_define([b4_symbol(37, number)],
[[37]])


m4_define([b4_symbol(27, user_number)],
[[269]])


m4_define([b4_symbol(45, tag)],
[[StmtList]])


m4_define([b4_symbol(20, has_printer)],
[[0]])


m4_define([b4_symbol(37, id)],
[[Function]])


m4_define([b4_symbol(39, tag)],
[[FormalArg]])


m4_define([b4_symbol(15, is_token)],
[[1]])


m4_define([b4_percent_define(lr.type)],
[[lalr]])


m4_define([b4_symbol(20, is_token)],
[[1]])


m4_define([b4_symbol(56, type)],
[[]])


m4_define([b4_symbol(58, has_destructor)],
[[0]])


m4_define([b4_symbol(55, has_type)],
[[0]])


m4_define([b4_symbol(27, has_destructor)],
[[0]])


m4_define([b4_nondeterministic_flag],
[[0]])


m4_define([b4_symbol(46, type)],
[[]])


m4_define([b4_symbol(58, tag)],
[[FunctionCall]])


m4_define([b4_table_min],
[[1]])


m4_define([b4_symbol(47, has_printer)],
[[0]])


m4_define([b4_symbol(40, number)],
[[40]])


m4_define([b4_symbol(56, user_number)],
[[-1]])


m4_define([b4_tname],
[["$][end", "error", "$][undefined", "OPERATOR", "Identifier", "IF", "ELSE",
  "WHILE", "INT", "NUMBER", "STRING", "TEXT", "VOID", "RETURN", "'('",
  "')'", "'{'", "'}'", "','", "';'", "'='", "'*'", "'/'", "'+'", "'-'",
  "'.'", "':'", "EqualTo", "LessThan", "GreaterThan", "LessThanOrEqualTo",
  "GreaterThanOrEqualTo", "NotEqualTo", "IFX", "$][accept", "Begin",
  "FunctionSet", "Function", "FormalArgList", "FormalArg", "ArgList",
  "Arg", "Declaration", "Type", "CompoundStmt", "StmtList", "Stmt",
  "WhileStmt", "IfStmt", "ReturnStmt", "Expr", "Attribution", "Rvalue",
  "Compare", "Addition", "Multiplication", "Term", "Factor",
  "FunctionCall", "StringConcat", ]b4_null[]])


m4_define([b4_symbol(36, type)],
[[NODE]])


m4_define([b4_symbol(43, number)],
[[43]])


m4_define([b4_symbol(6, has_printer)],
[[0]])


m4_define([b4_symbol(55, has_destructor)],
[[0]])


m4_define([b4_symbol(46, number)],
[[46]])


m4_define([b4_symbol(24, has_destructor)],
[[0]])


m4_define([b4_check_max],
[[109]])


m4_define([b4_symbol(49, number)],
[[49]])


m4_define([b4_symbol(32, id)],
[[NotEqualTo]])


m4_define([b4_symbol(26, type)],
[[]])


m4_define([b4_symbol(10, has_type)],
[[0]])


m4_define([b4_symbol(24, has_printer)],
[[0]])


m4_define([b4_symbol(33, user_number)],
[[275]])


m4_define([b4_symbol(16, is_token)],
[[1]])


m4_define([b4_symbol(1, type)],
[[]])


m4_define([b4_symbol(21, is_token)],
[[1]])


m4_define([b4_symbol(16, type)],
[[]])


m4_define([b4_symbol(56, has_type)],
[[0]])


m4_define([b4_symbol(9, has_destructor)],
[[0]])


m4_define([b4_symbol(52, has_destructor)],
[[0]])


m4_define([b4_symbol(21, has_destructor)],
[[0]])


m4_define([b4_symbol(0, number)],
[[0]])


m4_define([b4_undef_token_number],
[[2]])


m4_define([b4_symbol(10, user_number)],
[[265]])


m4_define([b4_symbol(3, number)],
[[3]])


m4_define([b4_symbol(25, id)],
[[]])


m4_define([b4_symbol(6, number)],
[[6]])


m4_define([b4_symbol(9, number)],
[[9]])


m4_define([b4_symbol(52, number)],
[[52]])


m4_define([b4_symbol(6, has_destructor)],
[[0]])


m4_define([b4_symbol(53, has_printer)],
[[0]])


m4_define([b4_symbol(55, number)],
[[55]])


m4_define([b4_symbol(11, has_type)],
[[1]])


m4_define([b4_symbol(59, id)],
[[StringConcat]])


m4_define([b4_dprec],
[[     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0]])


m4_define([b4_symbol(58, number)],
[[58]])


m4_define([b4_symbol(17, is_token)],
[[1]])


m4_define([b4_symbol(22, is_token)],
[[1]])


m4_define([b4_percent_define_kind(parse.trace)],
[[keyword]])


m4_define([b4_symbol(28, has_printer)],
[[0]])


m4_define([b4_symbol(37, user_number)],
[[-1]])


m4_define([b4_symbol(57, has_type)],
[[0]])


m4_define([b4_symbol(20, tag)],
[['=']])


m4_define([b4_symbol(30, has_printer)],
[[0]])


m4_define([b4_symbol(18, id)],
[[]])


m4_define([b4_symbol(3, has_destructor)],
[[0]])


m4_define([b4_symbol(2, tag)],
[[$][undefined]])


m4_define([b4_percent_define_loc(parse.error)],
[[[[090111575.y:145.9]], [[090111575.y:145.20]]]])


m4_define([b4_symbol(14, tag)],
[['(']])


m4_define([b4_symbol(51, type)],
[[]])


m4_define([b4_symbol(8, type)],
[[]])


m4_define([b4_symbol(20, id)],
[[]])


m4_define([b4_symbol(14, user_number)],
[[40]])


m4_define([b4_symbol(12, has_type)],
[[0]])


m4_define([b4_symbol(41, type)],
[[]])


m4_define([b4_symbol(0, has_destructor)],
[[0]])


m4_define([b4_percent_define(lr.default-reduction)],
[[most]])


m4_define([b4_symbol(33, tag)],
[[IFX]])


m4_define([b4_spec_graph_file],
[[]])


m4_define([b4_symbol(54, id)],
[[Addition]])


m4_define([b4_symbol(38, has_destructor)],
[[0]])


m4_define([b4_symbol(18, is_token)],
[[1]])


m4_define([b4_symbol(57, has_printer)],
[[0]])


m4_define([b4_defact_max],
[[67]])


m4_define([b4_symbol(23, is_token)],
[[1]])


m4_define([b4_symbol(31, type)],
[[]])


m4_define([b4_symbol(58, has_type)],
[[0]])


m4_define([b4_symbol(11, has_id)],
[[1]])


m4_define([b4_symbol(27, tag)],
[[EqualTo]])


m4_define([b4_symbol(9, tag)],
[[NUMBER]])


m4_define([b4_symbol(52, tag)],
[[Rvalue]])


m4_define([b4_symbol(14, has_id)],
[[0]])


m4_define([b4_symbol(13, id)],
[[RETURN]])


m4_define([b4_symbol(17, has_id)],
[[0]])


m4_define([b4_symbol(21, type)],
[[]])


m4_define([b4_symbol(35, has_destructor)],
[[0]])


m4_define([b4_symbol(34, has_printer)],
[[0]])


m4_define([b4_symbol(43, user_number)],
[[-1]])


m4_define([b4_symbol(46, tag)],
[[Stmt]])


m4_define([b4_symbol(47, id)],
[[WhileStmt]])


m4_define([b4_symbol(11, type)],
[[str_value]])


m4_define([b4_glr_flag],
[[0]])


m4_define([b4_symbol(2, user_number)],
[[257]])


m4_define([b4_symbol(18, user_number)],
[[44]])


m4_define([b4_symbol(13, has_type)],
[[0]])


m4_define([b4_merger_min],
[[0]])


m4_define([b4_symbol(19, is_token)],
[[1]])


m4_define([b4_symbol(6, id)],
[[ELSE]])


m4_define([b4_symbol(11, has_printer)],
[[0]])


m4_define([b4_symbol(32, has_destructor)],
[[0]])


m4_define([b4_symbol(24, is_token)],
[[1]])


m4_define([b4_r1_max],
[[59]])


m4_define([b4_symbol(20, user_number)],
[[61]])


m4_define([b4_toknum_min],
[[0]])


m4_define([b4_yacc_flag],
[[0]])


m4_define([b4_symbol(59, tag)],
[[StringConcat]])


m4_define([b4_symbol(59, has_type)],
[[0]])


m4_define([b4_stos],
[[     0,     8,    10,    35,    36,    37,    43,     0,    37,     4,
      14,    38,    39,    43,    15,    18,     4,    16,    44,    39,
      45,     4,     5,     7,     9,    11,    13,    14,    17,    23,
      24,    42,    43,    44,    46,    47,    48,    49,    50,    51,
      52,    54,    55,    56,    57,    58,    59,    14,    20,    25,
      26,    14,    14,    26,    50,    50,     4,    11,    56,    56,
      19,     4,    51,    19,    19,    27,    28,    29,    30,    31,
      32,    53,    23,    24,    21,    22,    26,     4,    40,    41,
      57,    58,    59,    50,     4,     4,    11,    50,    50,     4,
      11,    15,    54,    55,    55,    57,    57,     4,    11,    15,
      18,    14,    15,    15,    41,    40,    44,    46,    15,     6,
      44]])


m4_define([b4_symbol(58, type)],
[[]])


m4_define([b4_symbol(20, has_id)],
[[0]])


m4_define([b4_symbol(23, has_id)],
[[0]])


m4_define([b4_symbol(26, has_id)],
[[0]])


m4_define([b4_symbol(48, type)],
[[]])


m4_define([b4_percent_define_syncline(lr.default-reduction)],
[[]])


m4_define([b4_symbol(29, has_id)],
[[1]])


m4_define([b4_symbol(38, has_printer)],
[[0]])


m4_define([b4_symbol(42, id)],
[[Declaration]])


m4_define([b4_symbol(47, user_number)],
[[-1]])


m4_define([b4_symbol(38, type)],
[[NODE]])


m4_define([b4_tag_seen_flag],
[[1]])


m4_define([b4_symbol(40, has_printer)],
[[0]])


m4_define([b4_symbol(14, has_type)],
[[0]])


m4_define([b4_symbol(6, user_number)],
[[261]])


m4_define([b4_pact_max],
[[112]])


m4_define([b4_symbol(28, type)],
[[]])


m4_define([b4_symbol(25, is_token)],
[[1]])


m4_define([b4_symbol(1, id)],
[[error]])


m4_define([b4_symbol(30, is_token)],
[[1]])


m4_define([b4_percent_define_syncline(lr.keep-unreachable-state)],
[[]])


m4_define([b4_percent_define_loc(lr.type)],
[[[[<default value>:-1.-1]], [[<default value>:-1.-1]]]])


m4_define([b4_symbol(15, has_printer)],
[[0]])


m4_define([b4_symbol(3, type)],
[[char_value]])


m4_define([b4_symbol(24, user_number)],
[[45]])


m4_define([b4_symbol(18, type)],
[[]])


m4_define([b4_pgoto_min],
[[-46]])


m4_define([b4_symbol(35, id)],
[[Begin]])


m4_define([b4_symbol(32, has_id)],
[[1]])


m4_define([b4_symbol(35, has_id)],
[[1]])


m4_define([b4_symbol(49, has_destructor)],
[[0]])


m4_define([b4_symbol(38, has_id)],
[[1]])


m4_define([b4_symbol(18, has_destructor)],
[[0]])


m4_define([b4_symbol(12, number)],
[[12]])


m4_define([b4_r2_min],
[[0]])


m4_define([b4_symbol(15, number)],
[[15]])


m4_define([b4_percent_define_kind(parse.error)],
[[keyword]])


m4_define([b4_symbol(15, has_type)],
[[0]])


m4_define([b4_symbol(20, has_type)],
[[0]])


m4_define([b4_symbol(18, number)],
[[18]])


m4_define([b4_symbol(26, is_token)],
[[1]])


m4_define([b4_symbol(44, has_printer)],
[[0]])


m4_define([b4_symbol(31, is_token)],
[[1]])


m4_define([b4_symbol(53, user_number)],
[[-1]])


m4_define([b4_rline_min],
[[0]])


m4_define([b4_symbol(28, id)],
[[LessThan]])


m4_define([b4_symbol(21, tag)],
[['*']])


m4_define([b4_symbol(3, tag)],
[[OPERATOR]])


m4_define([b4_symbol(46, has_destructor)],
[[0]])


m4_define([b4_conflicting_rules_max],
[[0]])


m4_define([b4_symbol(3, has_printer)],
[[0]])


m4_define([b4_defines_flag],
[[1]])


m4_define([b4_symbol(19, has_printer)],
[[0]])


m4_define([b4_symbol(15, has_destructor)],
[[0]])


m4_define([b4_symbol(28, user_number)],
[[270]])


m4_define([b4_symbol(15, tag)],
[[')']])


m4_define([b4_symbol(40, tag)],
[[ArgList]])


m4_define([b4_symbol(30, id)],
[[LessThanOrEqualTo]])


m4_define([b4_symbol(21, has_printer)],
[[0]])


m4_define([b4_symbol(41, has_id)],
[[1]])


m4_define([b4_symbol(30, user_number)],
[[272]])


m4_define([b4_symbol(44, has_id)],
[[1]])


m4_define([b4_symbol(34, tag)],
[[$][accept]])


m4_define([b4_symbol(53, type)],
[[]])


m4_define([b4_symbol(43, has_destructor)],
[[0]])


m4_define([b4_symbol(47, has_id)],
[[1]])


m4_define([b4_symbol(21, number)],
[[21]])


m4_define([b4_symbol(16, has_type)],
[[0]])


m4_define([b4_symbol(12, has_destructor)],
[[0]])


m4_define([b4_symbol(21, has_type)],
[[0]])


m4_define([b4_defgoto],
[[    -1,     3,     4,     5,    11,    12,    78,    79,    31,     6,
      33,    20,    34,    35,    36,    37,    38,    39,    40,    71,
      41,    42,    43,    44,    45,    46]])


m4_define([b4_symbol(24, number)],
[[24]])


m4_define([b4_symbol(28, tag)],
[[LessThan]])


m4_define([b4_symbol(43, type)],
[[NODE]])


m4_define([b4_symbol(27, is_token)],
[[1]])


m4_define([b4_symbol(32, is_token)],
[[1]])


m4_define([b4_symbol(53, tag)],
[[Compare]])


m4_define([b4_symbol(27, number)],
[[27]])


m4_define([b4_percent_define_kind(lr.default-reduction)],
[[keyword]])


m4_define([b4_symbol(23, id)],
[[]])


m4_define([b4_symbol(48, has_printer)],
[[0]])


m4_define([b4_symbol(57, user_number)],
[[-1]])


m4_define([b4_symbol(40, has_destructor)],
[[0]])


m4_define([b4_symbol(33, type)],
[[]])


m4_define([b4_symbol(47, tag)],
[[WhileStmt]])


m4_define([b4_symbol(7, has_printer)],
[[0]])


m4_define([b4_symbol(50, has_printer)],
[[0]])


m4_define([b4_symbol(1, has_id)],
[[1]])


m4_define([b4_symbol(57, id)],
[[Factor]])


m4_define([b4_symbol(23, type)],
[[]])


m4_define([b4_symbol(4, has_id)],
[[1]])


m4_define([b4_symbol(25, has_printer)],
[[0]])


m4_define([b4_symbol(50, has_id)],
[[1]])


m4_define([b4_symbol(7, has_id)],
[[1]])


m4_define([b4_symbol(34, user_number)],
[[-1]])


m4_define([b4_symbol(53, has_id)],
[[1]])


m4_define([b4_symbol(17, has_type)],
[[0]])


m4_define([b4_symbol(13, type)],
[[]])


m4_define([b4_symbol(22, has_type)],
[[0]])


m4_define([b4_symbol(56, has_id)],
[[1]])


m4_define([b4_symbol(16, id)],
[[]])


m4_define([b4_symbol(30, number)],
[[30]])


m4_define([b4_check],
[[    14,    10,    47,     0,    47,     4,    15,    47,     4,    26,
      27,    20,    11,     4,     5,    11,     7,     8,     9,    10,
      11,     4,    13,    14,     4,    16,    17,    14,    11,    74,
      75,    48,    23,    24,    51,    52,    14,    14,    25,    26,
      15,     4,    20,    18,     4,     4,    14,    25,    26,     9,
       9,    11,    11,    23,    24,   100,   101,   100,   101,    16,
     100,   101,     4,     5,    14,     7,     8,     9,    10,    11,
       4,    13,    14,    26,    16,     9,    15,    11,    19,    18,
      14,    23,    24,     8,    15,    10,     4,    18,   102,    23,
      24,     9,     4,    11,   103,   109,    14,    27,    28,    29,
      30,    31,    32,    72,    73,    23,    24,    21,    22,    29,
      30,    19,    19,    26,     4,    15,    20,    14,     6,    15,
      15,     4,    15,    32,   103,   101,   100,    71]])


m4_define([b4_symbol(28, is_token)],
[[1]])


m4_define([b4_symbol(59, has_id)],
[[1]])


m4_define([b4_symbol(33, number)],
[[33]])


m4_define([b4_symbol(33, is_token)],
[[1]])


m4_define([b4_symbol(36, number)],
[[36]])


m4_define([b4_symbol(0, is_token)],
[[1]])


m4_define([b4_symbol(11, user_number)],
[[266]])


m4_define([b4_percent_define_bison_variables(lr.default-reduction)],
[[]])


m4_define([b4_symbol(39, number)],
[[39]])


m4_define([b4_symbol(29, has_destructor)],
[[0]])


m4_define([b4_merger],
[[     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0]])


m4_define([b4_symbol(52, id)],
[[Rvalue]])


m4_define([b4_symbol(9, id)],
[[NUMBER]])


m4_define([b4_percent_define(parse.trace)],
[[]])


m4_define([b4_symbol(54, has_printer)],
[[0]])


m4_define([b4_translate_max],
[[33]])


m4_define([b4_symbol(18, has_type)],
[[0]])


m4_define([b4_symbol(29, has_printer)],
[[0]])


m4_define([b4_symbol(23, has_type)],
[[0]])


m4_define([b4_symbol(57, has_destructor)],
[[0]])


m4_define([b4_symbol(38, user_number)],
[[-1]])


m4_define([b4_symbol(11, id)],
[[TEXT]])


m4_define([b4_symbol(29, is_token)],
[[1]])


m4_define([b4_symbol(26, has_destructor)],
[[0]])


m4_define([b4_symbols_number],
[[60]])


m4_define([b4_symbol(31, has_printer)],
[[0]])


m4_define([b4_symbol(34, is_token)],
[[0]])


m4_define([b4_symbol(40, user_number)],
[[-1]])


m4_define([b4_symbol(1, is_token)],
[[0]])


m4_define([b4_symbol(42, number)],
[[42]])


m4_define([b4_immediate],
[[     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0]])


m4_define([b4_symbol(45, id)],
[[StmtList]])


m4_define([b4_pre_prologue],
[[]b4_syncline(2, [["090111575.y"]])[

	#include <stdio.h>
	#include <stdlib.h>
	#include <string.h>

	/*define o tipo de informação que vamos passar pra ele:*/
	// #define YYSTYPE double
	/*geramos esta funcao com o flex, que eh padrao*/
	extern int yylex();

	extern int parse_multiple_line_comments();
	extern int parse_single_line_comments();
	extern int parse_string();

	extern int g_line_counter;

	/* protótipo da função de tratamento de erros do bison */
	void yyerror (char const *s);











	// tavam no .h:
					//structure of the a node
					typedef struct treeNode {
					    char description@{200@};
						char value@{200@};
						int countBeside;
					    struct treeNode *father, *listBrother, *child;
					} NODE;

					//structure of the pair, pair is a information bring of the sintatic
					typedef struct pairData {
					    char description@{200@};
						char value@{200@};
					} pairData;


					//structure of the fourData, fourData is a information bring of the sintatic to inser line in symbol table
					typedef struct fourData {
					    char name@{200@};
					    char value@{200@};
					    char type@{200@};
					    char category@{200@};
					} fourData;


					//structure of table symb
					//category ha two values: variable,function,param
					//type is INT ,FLOAT or VOID
					//scope: global or function name
					//name: ID
					typedef struct tabSymbol {
					    char name@{200@};
					    char value@{200@};
					    char scope@{200@};
					    char type@{200@};
					    char category@{200@};
					    struct tabSymbol *previous, *next;
					} tabSymbol;


					void printSymbolTable();
					void createLineSymbolTable(fourData*);
					void setScopeActual(const char*);
					void printScopeActual();
					void printPair(pairData*);
					void printNode(NODE*);
					NODE *createNode(pairData*);
					void newItemToList(NODE*, NODE*);
					void newChild(NODE*, NODE*);
					void showTree(NODE*, int);
					void findVarType(char *);
					void newAttrValue(char *);
					void lastVariableDeclaration(char *);


	//tavam no .c:
					//store the actual scope, if a global or function name
					char scopeActual@{200@};

					//Qtd of items of the symbol table
					int tamSymbolTable = 0;


					//store actual line of symbol table
					tabSymbol *auxLine;

					//first line of symbol table
					tabSymbol *firstLine;


					//last type found
					char varType @{200@};

					//last variable to include value in table symb on declaration of variables
					char lastVar @{200@};




	//tavam no .y:
					//description and value of the a rule of a structure of the my grammar
					pairData *pair;

					//data of symbols
					fourData *four;

					//actual id to after insert type var
					char lastType@{200@};

					//actual id to after insert type function
					char lastTypeFunction@{200@};












]])


m4_define([b4_symbol(5, type)],
[[]])


m4_define([b4_symbol(45, number)],
[[45]])


m4_define([b4_symbol(15, user_number)],
[[41]])


m4_define([b4_symbol(48, number)],
[[48]])


m4_define([b4_percent_define_how(parse.trace)],
[[0]])


m4_define([b4_symbol(54, has_destructor)],
[[0]])


m4_define([b4_symbol(4, id)],
[[Identifier]])


m4_define([b4_symbol(23, has_destructor)],
[[0]])


m4_define([b4_defgoto_max],
[[79]])


m4_define([b4_symbol(58, has_printer)],
[[0]])


m4_define([b4_symbol(19, has_type)],
[[0]])


m4_define([b4_symbol(24, has_type)],
[[0]])


m4_define([b4_symbol(22, tag)],
[['/']])


m4_define([b4_symbol(38, id)],
[[FormalArgList]])


m4_define([b4_symbol(4, tag)],
[[Identifier]])


m4_define([b4_symbol(51, has_destructor)],
[[0]])


m4_define([b4_symbol(8, has_destructor)],
[[0]])


m4_define([b4_dprec_min],
[[0]])


m4_define([b4_symbol(2, number)],
[[2]])


m4_define([b4_symbol(35, is_token)],
[[0]])


m4_define([b4_stos_min],
[[0]])


m4_define([b4_symbol(20, has_destructor)],
[[0]])


m4_define([b4_symbol(40, is_token)],
[[0]])


m4_define([b4_symbol(2, is_token)],
[[0]])


m4_define([b4_symbol(5, number)],
[[5]])


m4_define([b4_symbol(16, tag)],
[['{']])


m4_define([b4_symbol(35, has_printer)],
[[0]])


m4_define([b4_symbol(41, tag)],
[[Arg]])


m4_define([b4_symbol(51, number)],
[[51]])


m4_define([b4_symbol(44, user_number)],
[[-1]])


m4_define([b4_symbol(8, number)],
[[8]])


m4_define([b4_symbol(40, id)],
[[ArgList]])


m4_define([b4_r1],
[[     0,    34,    35,    36,    36,    37,    38,    38,    38,    39,
      40,    40,    40,    41,    41,    41,    42,    42,    43,    43,
      44,    45,    45,    46,    46,    46,    46,    46,    46,    47,
      48,    48,    49,    49,    50,    50,    50,    50,    51,    52,
      52,    53,    53,    53,    53,    53,    53,    54,    54,    54,
      55,    55,    55,    56,    56,    56,    56,    57,    57,    57,
      58,    58,    59,    59,    59,    59,    59,    59]])


m4_define([b4_r2],
[[     0,     2,     1,     2,     1,     6,     0,     1,     3,     2,
       0,     1,     3,     1,     1,     1,     2,     2,     1,     1,
       3,     2,     0,     1,     2,     2,     1,     1,     2,     5,
       5,     7,     1,     2,     1,     1,     1,     1,     3,     3,
       1,     1,     1,     1,     1,     1,     1,     3,     3,     1,
       3,     3,     1,     3,     2,     2,     1,     1,     1,     1,
       4,     6,     3,     3,     3,     3,     3,     3]])


m4_define([b4_symbol(54, number)],
[[54]])


m4_define([b4_symbol(3, user_number)],
[[258]])


m4_define([b4_symbol(57, number)],
[[57]])


m4_define([b4_symbol(5, has_destructor)],
[[0]])


m4_define([b4_symbol(19, user_number)],
[[59]])


m4_define([b4_symbol(35, tag)],
[[Begin]])


m4_define([b4_symbol(12, has_printer)],
[[0]])


m4_define([b4_symbol(21, user_number)],
[[42]])


m4_define([b4_percent_define_loc(lr.keep-unreachable-state)],
[[[[<default value>:-1.-1]], [[<default value>:-1.-1]]]])


m4_define([b4_symbol(29, tag)],
[[GreaterThan]])


m4_define([b4_symbol(25, has_type)],
[[0]])


m4_define([b4_symbol(55, type)],
[[]])


m4_define([b4_symbol(54, tag)],
[[Addition]])


m4_define([b4_symbol(30, has_type)],
[[0]])


m4_define([b4_symbol(33, id)],
[[IFX]])


m4_define([b4_percent_define_syncline(parse.trace)],
[[]b4_syncline(3, [["<command line>"]])[]])


m4_define([b4_symbol(36, is_token)],
[[0]])


m4_define([b4_conflict_list_heads_min],
[[0]])


m4_define([b4_symbol(41, is_token)],
[[0]])


m4_define([b4_symbol(2, has_destructor)],
[[0]])


m4_define([b4_symbol(3, is_token)],
[[1]])


m4_define([b4_symbol(48, tag)],
[[IfStmt]])


m4_define([b4_symbol(45, type)],
[[NODE]])


m4_define([b4_parser_file_name],
[[090111575.tab.c]])


m4_define([b4_percent_define(lr.keep-unreachable-state)],
[[false]])


m4_define([b4_symbol(39, has_printer)],
[[0]])


m4_define([b4_symbol(35, type)],
[[NODE]])


m4_define([b4_symbol(48, user_number)],
[[-1]])


m4_define([b4_immediate_min],
[[0]])


m4_define([b4_symbol(41, has_printer)],
[[0]])


m4_define([b4_symbol(7, user_number)],
[[262]])


m4_define([b4_symbol(50, user_number)],
[[-1]])


m4_define([b4_symbol(10, has_id)],
[[1]])


m4_define([b4_symbol(26, id)],
[[]])


m4_define([b4_symbol(25, type)],
[[]])


m4_define([b4_symbol(37, has_destructor)],
[[0]])


m4_define([b4_symbol(0, type)],
[[]])


m4_define([b4_symbol(0, has_printer)],
[[0]])


m4_define([b4_symbol(13, has_id)],
[[1]])


m4_define([b4_symbol(16, has_printer)],
[[0]])


m4_define([b4_symbol(26, has_type)],
[[0]])


m4_define([b4_symbol(31, has_type)],
[[0]])


m4_define([b4_symbol(25, user_number)],
[[46]])


m4_define([b4_symbol(16, has_id)],
[[0]])


m4_define([b4_symbol(15, type)],
[[]])


m4_define([b4_symbol(37, is_token)],
[[0]])


m4_define([b4_symbol(19, has_id)],
[[0]])


m4_define([b4_tokens_number],
[[34]])


m4_define([b4_symbol(42, is_token)],
[[0]])


m4_define([b4_symbol(4, is_token)],
[[1]])


m4_define([b4_synclines_flag],
[[1]])


m4_define([b4_symbol(34, has_destructor)],
[[0]])


m4_define([b4_states_number],
[[111]])


m4_define([b4_percent_define(parse.error)],
[[verbose]])


m4_define([b4_symbol(19, id)],
[[]])


m4_define([b4_version],
[[3.0.4]])


m4_define([b4_symbol(21, id)],
[[]])


m4_define([b4_symbol(45, has_printer)],
[[0]])


m4_define([b4_symbol(31, has_destructor)],
[[0]])


m4_define([b4_symbol(54, user_number)],
[[-1]])


m4_define([b4_symbol(27, has_type)],
[[0]])


m4_define([b4_symbol(32, has_type)],
[[0]])


m4_define([b4_symbol(22, has_id)],
[[0]])


m4_define([b4_symbol(4, has_printer)],
[[0]])


m4_define([b4_table_max],
[[110]])


m4_define([b4_symbol(55, id)],
[[Multiplication]])


m4_define([b4_symbol(25, has_id)],
[[0]])


m4_define([b4_symbol(38, is_token)],
[[0]])


m4_define([b4_epilogue],
[[]b4_syncline(393, [["090111575.y"]])[


/* Epílogo ( código no final do arquivo ) */
/* Chamado quando há um erro sintático na entrada . */
void yyerror ( char const *s) {
	printf ("Line %d: %s\n", g_line_counter, s);
}

int main ( void ) {

	pair = (pairData *) malloc (sizeof(pairData));
    four = (fourData *) malloc (sizeof(fourData));

	/* Chama o parser . */
	return yyparse () ;
}



















//Print the symboltable
void printSymbolTable(){

    tabSymbol *aux;

    aux = firstLine;

    printf("\n\nTABELA DE SIMBOLOS -------------------\n");

    if(tamSymbolTable > 0){

        while(aux != NULL){
            //printf("\nNAME: %s\nVALUE: %s\nSCOPE: %s \nTYPE: %s \nCATEGORY: %s\n", aux->name,aux->value,aux->scope,aux->type,aux->category);
            printf("\nNAME: %s\nVALUE: %s\nSCOPE: %s \nTYPE: %s \nCATEGORY: %s\n", aux->name,aux->value,aux->scope,aux->type,aux->category);
            aux = aux->next;
        }
        //printf("\n");
        printf("\n");

    }

    printf("\n\n\n\n");
}


void lastVariableDeclaration(char * variable){

    strcpy(lastVar ,variable);
}

void newAttrValue(char * value){

    tabSymbol *aux;

    aux = firstLine;


    if(tamSymbolTable > 0){

        while(aux != NULL){

            if(strcmp(aux->name,lastVar) == 0){
                strcpy(aux->value , value);
            }

            aux = aux->next;
        }
    }
}

//Create a new line to symbol table, and do the appointments next and previous
void createLineSymbolTable(fourData * data){

    tabSymbol *line;
    line = (tabSymbol *) malloc (sizeof(tabSymbol));

    //if is first entrance of symbol table
    if(tamSymbolTable == 0){

        //get data informatios from syntactic
        strcpy(line->name ,data->name);
        strcpy(line->value ,data->value);

        if( strcmp(data->category,"VARIABLE") == 0 && strcmp(data->type,"MATRIX") != 0 ){
            strcpy(line->type,varType);
        }else{
            strcpy(line->type,data->type);
        }


        strcpy(line->category ,data->category);
        strcpy(line->scope,scopeActual);

        //how is first, no have others entrances in list
        line->previous = NULL;
        line->next = NULL;

        tamSymbolTable++;

        auxLine = line;

        //this i will use to printer all table
        firstLine = line;

    }else{

        //get data informatios from syntactic
        strcpy(line->name ,data->name);
        strcpy(line->value ,data->value);

        if( strcmp(data->category,"VARIABLE") == 0  && strcmp(data->type,"MATRIX") != 0 ){
            strcpy(line->type,varType);
        }else{
            strcpy(line->type,data->type);
        }

        strcpy(line->category ,data->category);
        strcpy(line->scope,scopeActual);

        //This previous pointer to auxLine
        line->previous = auxLine;
        line->next = NULL;

        //Previous pointer to this
        auxLine->next = line;

        tamSymbolTable++;

        //Now, auxLine is this
        auxLine = line;


    }

}


//set global var with actual type
void findVarType(char * type){
    strcpy(varType,type);
}


//syntactic set the actual scope in global variable scopeActual
void setScopeActual(const char *scopeName){

    tabSymbol *aux;

    if(strcmp(scopeName,"") !=0){
        strcpy(scopeActual,scopeName);
    }

    aux = firstLine;

    if(tamSymbolTable > 0){

        while(aux != NULL){

            if( strcmp(aux->category,"VARIABLE") == 0 && strcmp(scopeActual,"GLOBAL") != 0 && strcmp(aux->scope,"-") == 0 && strcmp(scopeName,"-") != 0 ){
                strcpy(aux->scope,scopeName);
            }

            aux = aux->next;
        }
    }



}

//syntactic set the actual scope in global variable scopeActual
void printScopeActual(){
    printf("ScopeActual: %s\n", scopeActual);
}


//print a any node, this function was to test my tree is correct ( debug )
void printNode(NODE * node){

    if(node != NULL){
        printf("Description: %s Value: %s\n", node->description, node->value);
    }
}

//print a any node, this function was to test to verify if the sitatic is sent correct
void printPair(pairData * pair){
    printf("Description: %s Value: %s\n", pair->description, pair->value);
}

//add a child to no void list of childs
void newItemToList(NODE *root, NODE *item) {

    int flag = 0;
    NODE *temp;

    //if have a child, so do the inclusion, else not do action
    if(item != NULL){

        //if is the first child
        if (root->listBrother == NULL) {
            root->listBrother = item;
        } else {

            //add a new child in a child list
            temp = root->listBrother;

            while(flag == 0){

                if(temp->listBrother != NULL){
                    temp = temp->listBrother;
                }else{
                    flag = 1;
                }

            }

            //effect of the add
            temp->listBrother = item;
        }
    }
}

//Create a node without father and child...
NODE *createNode(pairData *pair) {
    NODE *node;

    node = (NODE *) malloc (sizeof(NODE));

    //Copy the ffont value
    strcpy(node->description , pair->description);
    strcpy(node->value , pair->value);

    //How i am creating a pure node, so the family is NULL
    node->countBeside = 0;
    node->father = NULL;
    node->child = NULL;
    node->listBrother = NULL;

    return node;
}

//Add a child in list of childs
void newChild(NODE *root, NODE *item) {

    int flag = 0;
    NODE *temp;



    //if really have a child to add
    if(item != NULL){

        //if is the first child
        if (root->child == NULL) {
            //set the father and child of the new child
            item->father = root;
            root->child = item;
        } else{
            //insert the child in list
            newItemToList(root->child, item);
        }

        //now, node have more one child
        root->countBeside++;

        temp = item;

        //verify all childs of the list and set the father to this
        while(flag == 0){

            if(temp != NULL){
                temp = temp->listBrother;

                if(temp != NULL){
                    temp->father = root;
                }
            }else{
                flag = 1;
            }

        }
    }
}



void printTree(NODE* root, int tabulation) {

    NODE* aux = NULL;
    int i=0;

    //if have a tree
    if (root != NULL) {


        //tabulation, each time than print a node, this is add
        for(i = 0; i < tabulation; i++){
            printf("|\t");
            // printf("  ");
        }


        //printf("%s %s\n", root->description, root->value);
        printf("%s %s\n", root->description, root->value);

        aux = root->child;

        //recursion to print the childs e childs of childs
        while (aux != NULL) {
            printTree(aux, tabulation + 1);
            aux = aux->listBrother;
        }

    }

}

//print a tree form a root or subroot
void showTree(NODE* root, int tabulation) {

    printf("\n\nARVORE -------------------\n\n");

    printTree(root,tabulation);

}
]])


m4_define([b4_symbol(29, user_number)],
[[271]])


m4_define([b4_symbol(43, is_token)],
[[0]])


m4_define([b4_symbol(10, tag)],
[[STRING]])


m4_define([b4_symbol(28, has_id)],
[[1]])


m4_define([b4_symbol(5, is_token)],
[[1]])


m4_define([b4_symbol(22, has_printer)],
[[0]])


m4_define([b4_percent_define_how(parse.error)],
[[2]])


m4_define([b4_symbol(31, user_number)],
[[273]])


m4_define([b4_symbol(7, type)],
[[]])


m4_define([b4_symbol(50, type)],
[[]])


m4_define([b4_symbol(14, id)],
[[]])


m4_define([b4_spec_file_prefix],
[[]])


m4_define([b4_pgoto],
[[   -46,   -46,   -46,   117,   -46,   107,    24,    26,   -46,    -9,
     -14,   -46,    21,   -46,   -46,   -46,   -17,    91,   -46,   -46,
      56,    31,    80,   -45,   -43,   -40]])


m4_define([b4_symbol(40, type)],
[[]])


m4_define([b4_final_state_number],
[[7]])


m4_define([b4_symbol(23, tag)],
[['+']])


m4_define([b4_symbol(48, id)],
[[IfStmt]])


m4_define([b4_symbol(5, tag)],
[[IF]])


m4_define([b4_symbol(28, has_type)],
[[0]])


m4_define([b4_symbol(33, has_type)],
[[0]])


m4_define([b4_symbol(49, has_printer)],
[[0]])


m4_define([b4_symbol(30, type)],
[[]])


m4_define([b4_symbol(58, user_number)],
[[-1]])


m4_define([b4_check_min],
[[0]])


m4_define([b4_symbol(17, tag)],
[['}']])


m4_define([b4_symbol(31, has_id)],
[[1]])


m4_define([b4_symbol(0, has_type)],
[[0]])


m4_define([b4_symbol(39, is_token)],
[[0]])


m4_define([b4_symbol(7, id)],
[[WHILE]])


m4_define([b4_symbol(50, id)],
[[Expr]])


m4_define([b4_symbol(44, is_token)],
[[0]])


m4_define([b4_symbol(42, tag)],
[[Declaration]])


m4_define([b4_symbol(8, has_printer)],
[[0]])


m4_define([b4_symbol(51, has_printer)],
[[0]])


m4_define([b4_symbol(34, has_id)],
[[0]])


m4_define([b4_symbol(6, is_token)],
[[1]])


m4_define([b4_symbol(20, type)],
[[]])


m4_define([b4_symbol(37, has_id)],
[[1]])


m4_define([b4_percent_define_user_variables],
[[[[[[parse.trace]], [[<command line>:3.-1]], [[<command line>:3.-1]]]],[[[[parse.error]], [[090111575.y:145.9]], [[090111575.y:145.20]]]]]])


m4_define([b4_symbol(11, number)],
[[11]])


m4_define([b4_symbol(36, tag)],
[[FunctionSet]])


m4_define([b4_symbol(26, has_printer)],
[[0]])


m4_define([b4_symbol(48, has_destructor)],
[[0]])


m4_define([b4_symbol(14, number)],
[[14]])


m4_define([b4_symbol(35, user_number)],
[[-1]])


m4_define([b4_symbol(10, type)],
[[]])


m4_define([b4_symbol(17, number)],
[[17]])


m4_define([b4_symbol(17, has_destructor)],
[[0]])


m4_define([b4_symbol(55, tag)],
[[Multiplication]])


m4_define([b4_symbol(43, id)],
[[Type]])


m4_define([b4_percent_define_syncline(parse.error)],
[[]b4_syncline(145, [["090111575.y"]])[]])


m4_define([b4_symbol(29, has_type)],
[[0]])


m4_define([b4_symbol(34, has_type)],
[[0]])


m4_define([b4_symbol(12, user_number)],
[[267]])


m4_define([b4_symbol(49, tag)],
[[ReturnStmt]])


m4_define([b4_symbol(45, has_destructor)],
[[0]])


m4_define([b4_symbol(1, has_type)],
[[0]])


m4_define([b4_symbol(57, type)],
[[]])


m4_define([b4_symbol(14, has_destructor)],
[[0]])


m4_define([b4_symbol(45, is_token)],
[[0]])


m4_define([b4_symbol(40, has_id)],
[[1]])


m4_define([b4_symbol(50, is_token)],
[[0]])


m4_define([b4_symbol(7, is_token)],
[[1]])


m4_define([b4_symbol(2, id)],
[[]])


m4_define([b4_symbol(43, has_id)],
[[1]])


m4_define([b4_toknum],
[[     0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,    40,    41,   123,   125,    44,    59,
      61,    42,    47,    43,    45,    46,    58,   269,   270,   271,
     272,   273,   274,   275]])


m4_define([b4_symbol(55, has_printer)],
[[0]])


m4_define([b4_symbol(47, type)],
[[]])


m4_define([b4_symbol(46, has_id)],
[[1]])


m4_define([b4_dir_prefix],
[[]])


m4_define([b4_symbol(20, number)],
[[20]])


m4_define([b4_symbol(49, has_id)],
[[1]])


m4_define([b4_symbol(23, number)],
[[23]])


m4_define([b4_symbol(42, has_destructor)],
[[0]])


m4_define([b4_symbol(36, id)],
[[FunctionSet]])


m4_define([b4_symbol(37, type)],
[[NODE]])


m4_define([b4_symbol(26, number)],
[[26]])


m4_define([b4_symbol(39, user_number)],
[[-1]])


m4_define([b4_symbol(11, has_destructor)],
[[0]])


m4_define([b4_symbol(29, number)],
[[29]])


m4_define([b4_symbol(32, has_printer)],
[[0]])


m4_define([b4_file_name],
[["090111575.y"]])


m4_define([b4_symbol(27, type)],
[[]])


m4_define([b4_symbol(41, user_number)],
[[-1]])


m4_define([b4_percent_define_kind(lr.keep-unreachable-state)],
[[keyword]])


m4_define([b4_symbol(35, has_type)],
[[1]])


m4_define([b4_symbol(40, has_type)],
[[0]])


m4_define([b4_symbol(2, type)],
[[]])


m4_define([b4_symbol(2, has_type)],
[[0]])


m4_define([b4_symbol(0, has_id)],
[[0]])


m4_define([b4_symbol(0, user_number)],
[[0]])


m4_define([b4_symbol(46, is_token)],
[[0]])


m4_define([b4_symbol(17, type)],
[[]])


m4_define([b4_symbol(51, is_token)],
[[0]])


m4_define([b4_symbol(16, user_number)],
[[123]])


m4_define([b4_symbol(3, has_id)],
[[1]])


m4_define([b4_symbol(8, is_token)],
[[1]])


m4_define([b4_defact_min],
[[0]])


m4_define([b4_symbol(29, id)],
[[GreaterThan]])


m4_define([b4_symbol(6, has_id)],
[[1]])


m4_define([b4_table_ninf],
[[-1]])


m4_define([b4_symbol(52, has_id)],
[[1]])


m4_define([b4_symbol(9, has_id)],
[[1]])


m4_define([b4_symbol(55, has_id)],
[[1]])


m4_define([b4_symbol(59, has_printer)],
[[0]])


m4_define([b4_percent_define_kind(lr.type)],
[[keyword]])


m4_define([b4_symbol(31, id)],
[[GreaterThanOrEqualTo]])


m4_define([b4_symbol(58, has_id)],
[[1]])


m4_define([b4_merger_max],
[[0]])


m4_define([b4_symbol(32, number)],
[[32]])


m4_define([b4_toknum_max],
[[275]])


m4_define([b4_symbol(35, number)],
[[35]])


m4_define([b4_symbol(38, number)],
[[38]])


m4_define([b4_union_members],
[[]b4_syncline(137, [["090111575.y"]])[

	int int_value;
	char str_value@{255@};
	char char_value;

	struct treeNode *NODE;
]])


m4_define([b4_symbol(36, has_type)],
[[1]])


m4_define([b4_symbol(36, has_printer)],
[[0]])


m4_define([b4_symbol(41, has_type)],
[[0]])


m4_define([b4_symbol(11, tag)],
[[TEXT]])


m4_define([b4_symbol(3, has_type)],
[[1]])


m4_define([b4_symbol(45, user_number)],
[[-1]])


m4_define([b4_symbol(47, is_token)],
[[0]])


m4_define([b4_symbol(9, is_token)],
[[1]])


m4_define([b4_symbol(59, has_destructor)],
[[0]])


m4_define([b4_symbol(52, is_token)],
[[0]])


m4_define([b4_r1_min],
[[0]])


m4_define([b4_symbol(4, user_number)],
[[259]])


m4_define([b4_symbol(28, has_destructor)],
[[0]])


m4_define([b4_symbol(24, id)],
[[]])


m4_define([b4_symbol(30, tag)],
[[LessThanOrEqualTo]])


m4_define([b4_symbol(13, has_printer)],
[[0]])


m4_define([b4_symbol(22, user_number)],
[[47]])


m4_define([b4_symbol(24, tag)],
[['-']])


m4_define([b4_file_name_all_but_ext],
[[090111575.tab]])


m4_define([b4_symbol(58, id)],
[[FunctionCall]])


m4_define([b4_symbol(52, type)],
[[]])


m4_define([b4_symbol(9, type)],
[[int_value]])


m4_define([b4_symbol(6, tag)],
[[ELSE]])


m4_define([b4_symbol(56, has_destructor)],
[[0]])


m4_define([b4_translate],
[[     0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
      14,    15,    21,    23,    18,    24,    25,    22,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,    26,    19,
       2,    20,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,    16,     2,    17,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    27,
      28,    29,    30,    31,    32,    33]])


m4_define([b4_symbol(41, number)],
[[41]])


m4_define([b4_symbol(25, has_destructor)],
[[0]])


m4_define([b4_symbol(18, tag)],
[[',']])


m4_define([b4_symbol(44, number)],
[[44]])


m4_define([b4_symbol(42, type)],
[[]])


m4_define([b4_symbol(37, has_type)],
[[1]])


m4_define([b4_symbol(43, tag)],
[[Type]])


m4_define([b4_pgoto_max],
[[117]])


m4_define([b4_symbol(47, number)],
[[47]])


m4_define([b4_symbol(42, has_type)],
[[0]])


m4_define([b4_symbol(4, has_type)],
[[1]])


m4_define([b4_symbol(17, id)],
[[]])


m4_define([b4_symbol(48, is_token)],
[[0]])


m4_define([b4_symbol(32, type)],
[[]])


m4_define([b4_symbol(53, is_token)],
[[0]])


m4_define([b4_pact_min],
[[-46]])


m4_define([b4_symbol(37, tag)],
[[Function]])


m4_define([b4_symbol(49, user_number)],
[[-1]])


m4_define([b4_symbol(53, has_destructor)],
[[0]])


m4_define([b4_table],
[[    18,    13,    80,     7,    81,    85,    13,    82,    89,    54,
      55,    32,    86,    21,    22,    90,    23,     1,    24,     2,
      25,    97,    26,    27,     9,    17,    28,    47,    98,    95,
      96,    83,    29,    30,    87,    88,    47,    10,    49,    50,
      14,    16,    48,    15,    77,    56,    51,    49,    50,    24,
      24,    25,    57,    72,    73,    80,    80,    81,    81,    17,
      82,    82,    21,    22,    52,    23,     1,    24,     2,    25,
      21,    26,    27,    53,    17,    24,    99,    25,    60,   100,
      27,    29,    30,     1,   108,     2,    56,   100,   106,    29,
      30,    24,    61,    57,    32,   110,    27,    65,    66,    67,
      68,    69,    70,    93,    94,    29,    30,    74,    75,    58,
      59,    63,    64,    76,    84,    91,    48,   101,   109,   102,
     103,     8,    19,    62,   107,   105,   104,    92]])


m4_define([b4_symbol(42, has_printer)],
[[0]])


m4_define([b4_symbol(22, has_destructor)],
[[0]])


m4_define([b4_symbol(22, type)],
[[]])


m4_define([b4_symbol(51, user_number)],
[[-1]])


m4_define([b4_symbol(8, user_number)],
[[263]])


m4_define([b4_r2_max],
[[7]])


m4_define([b4_symbol(56, tag)],
[[Term]])


m4_define([b4_symbol(1, has_printer)],
[[0]])


m4_define([b4_symbol(17, has_printer)],
[[0]])


m4_define([b4_symbol(53, id)],
[[Compare]])


m4_define([b4_symbol(1, number)],
[[1]])


m4_define([b4_symbol(12, type)],
[[]])


m4_define([b4_symbol(26, user_number)],
[[58]])


m4_define([b4_symbol(4, number)],
[[4]])


